// 
// THIS SCRIPT IS CREATED BY CHRISTIAN BRON
// USE ONLY WITH PYTHON FLASK OR DJANGO
//
// v 0.13.1
var CONNECTION = {}
var REQUESTS = {}
var CONNECTION_COUNTER = 0
var ERR_EXCEPTIONS = false

const _JS_NAME = 'brorn.JS' 
const _JS_VERSION_ = 'v 0.13.1_alpha' 
const _VERSION_ = _JS_VERSION_
const _ = undefined

const POST = "POST"
const GET = "GET"
const OPTION = "OPTION"

function $CLASS(class_name){return document.getElementsByClassName(class_name)}
function $randint(size){return Math.floor(Math.random() * size);}
function $ID(id_name){return document.getElementById(id_name)}
function $goto(url){window.location.replace(url);}
// function $(q){return document.querySelector(q)}
function $json(str){return JSON.parse(str)}
function $table(...p){console.table(...p)}
function $print(...p){console.log(...p)}
function $date(){d=new Date();return d}
function $datetime(){return new Date().toLocaleString()}

function $DATA(d){
	var data_form = new FormData();
	for (var key in d){data_form.append(key, d[key])}
	return data_form
}

function $show_view(ids,classn){
 	panel_views = c(classn)
 	for (var i = 0; i < panel_views.length; i++) {
 		if(ids!=panel_views[i].id){panel_views[i].style.display="none"}
 		else{panel_views[i].style.display="block"}
 	}
 }

function $http(p){return http(p)}
function $send(p){return http(p)}
async function http(p){
	CONNECTION_COUNTER += 1
	params = populate(p)
	params.headers["JS-Handler"] = _JS_NAME
	ACTIVE_CONNECTION = (CONNECTION_COUNTER)
	REQUESTS[ACTIVE_CONNECTION] = params;
	CONNECTION[ACTIVE_CONNECTION] = new XMLHttpRequest();
	xhttp = CONNECTION[ACTIVE_CONNECTION];
	xhttp.onreadystatechange = function(){
		if(this.readyState == 4 && this.status == 200) {
			if(params.response=="all"){params.func(this)}
			else if(params.response=="header"){params.func(this.getAllResponseHeaders())}
			else if(params.response=="text"){params.func(this.responseText)}
			else{params.func(this.responseText)}
		}
		if(this.status == 500 || this.status == 404){
			$print(this.getAllResponseHeaders)
			params.func(this.getAllResponseHeaders)
			ERROR = {"ERROR_REQUEST" : REQUESTS[ACTIVE_CONNECTION]}
			$print(ERROR)
			return "_ERROR_"
		}
	};
	xhttp.open(params.method,params.action,params._async); //ASYNC USER DEFINED
	// xhttp.open(params.method,params.action,true); //ASYNC ALWAYS TRUE
	for (var key in params.headers){xhttp.setRequestHeader(key, params.headers[key])}
	await xhttp.send(params.data);
}
  
String.prototype.replaceAt = function(index, replacement) {
	return this.substr(0, index) + replacement + this.substr(index + replacement.length);
}

function $TRIGGER(params){
	if(params.id==_){params.action='#'}
	if(params.event==_){params.event="click"}
	if(params.func==_){params.func= function(){alert(params)}}
	$(params.id).addEventListener(params.event, params.func);
}
function populate(params){
	if(params.action==_){params.action='/'}
	if(params.data==_){params.data=$DATA({'_DATA':'NULL'})}
	if(params.func==_){params.func=function(res){$print(res)}}
	if(params.method==_){params.method='POST'}
	if(params._async==_){params._async=true}
	if(params.response==_){params.type="responseText"}
	if(params.headers==_){params.headers={"ASYNC":params._async,"req-response":params.response}}
	return params
}